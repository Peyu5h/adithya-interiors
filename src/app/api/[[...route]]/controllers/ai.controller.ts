import { Context } from "hono";

async function generateBlogContentWithGemini(prompt: string): Promise<string> {
  const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

  if (!GEMINI_API_KEY) {
    throw new Error("Gemini API key not configured");
  }

  const systemPrompt = `
      You are a professional blog content writer. Generate high-quality blog content in HTML format.
      
      Requirements:
      - Use ONLY the following HTML tags: <section>, <h2>, <p>, <strong>, <ul>, <ol>, <li>, <table>, <tr>, <th>, <td>, <tbody>, <thead>
      - Structure content with multiple sections using <section> tags.
      - Use ONLY <h2> for headings.
      - Use <strong> tags to emphasize important points.
      - Use <table> for tabular data and <ul> or <ol> for lists where appropriate.
      - DO NOT include <img> tags.
      - Write comprehensive, engaging content.
      - Make it informative and well-structured.
      - Length should be substantial (1000+ words equivalent)
      
      Topic: ${prompt}
      
      Generate blog content following the exact HTML structure requirements. The content should be detailed and broken into multiple sections.
    `;

  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: systemPrompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
        }),
      },
    );

    if (!response.ok) {
      const errorBody = await response.text();
      console.error("Gemini API error response:", errorBody);
      throw new Error(`Gemini API error: ${response.statusText}`);
    }

    const data = await response.json();
    const generatedContent = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedContent) {
      throw new Error("No content generated by Gemini");
    }

    // Clean up the response to ensure it's properly formatted HTML
    return generatedContent
      .replace(/```html/g, "")
      .replace(/```/g, "")
      .trim();
  } catch (error) {
    console.error("Gemini API Error:", error);
    throw new Error("Failed to generate content with AI");
  }
}

export const generateBlog = async (c: Context) => {
  try {
    const { prompt } = await c.req.json();

    if (!prompt) {
      return c.json({ success: false, message: "Prompt is required" }, 400);
    }

    const content = await generateBlogContentWithGemini(prompt);

    return c.json({ success: true, content });
  } catch (error) {
    return c.json(
      { success: false, message: "Failed to generate content" },
      500,
    );
  }
};
